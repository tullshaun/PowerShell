30 useful PowerShell scripts:


# Get detailed system information
Get-ComputerInfo | Select-Object @{Name='Operating System';Expression={$_.OsName}}, @{Name='OS Architecture';Expression={$_.OsArchitecture}}, @{Name='Physical Memory (GB)';Expression={'{0:N2}' -f ($_.CsPhyicallyInstalledMemory/1GB)}}, @{Name='Logical Processors';Expression={$_.CsNumberOfLogicalProcessors}}, @{Name='Hyper-V Support';Expression={$_.CsHyperVisorPresent}}


# Get a list of installed software
Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -AutoSize


# Get a list of running processes with their CPU and memory usage
Get-Process | Select-Object ProcessName, CPU, @{Name='Memory (MB)';Expression={'{0:N2}' -f ($_.WS/1MB)}} | Sort-Object CPU -Descending | Format-Table -AutoSize


# Get network interface information
Get-NetIPConfiguration | Select-Object InterfaceAlias, InterfaceDescription, IPv4Address, IPv6Address, @{Name='Default Gateway';Expression={$_.IPv4DefaultGateway.NextHop}} | Format-Table -AutoSize


# Get disk information
Get-Disk | Select-Object FriendlyName, OperationalStatus, HealthStatus, @{Name='Size (GB)';Expression={'{0:N2}' -f ($_.Size/1GB)}}, @{Name='Free Space (GB)';Expression={'{0:N2}' -f ($_.LargestFreeExtent/1GB)}} | Format-Table -AutoSize


# Get the latest 50 error events from the System log
Get-EventLog -LogName System -EntryType Error -Newest 50


# Get a list of running services
Get-Service | Where-Object {$_.Status -eq 'Running'} | Select-Object Name, DisplayName, Status | Format-Table -AutoSize



# Get active firewall rules
Get-NetFirewallRule | Where-Object {$_.Enabled -eq 'True'} | Select-Object Name, DisplayName, Action, Profile | Format-Table -AutoSize



# Get a list of scheduled tasks
Get-ScheduledTask | Select-Object TaskName, State, LastRunTime, NextRunTime | Format-Table -AutoSize



# Get a list of environment variables
Get-ChildItem Env:


# Get a list of local user accounts
Get-LocalUser | Select-Object Name, Enabled, Description, LastLogon | Format-Table -AutoSize


# Get installed hotfixes and updates
Get-HotFix | Select-Object HotFixID, Description, InstalledOn | Format-Table -AutoSize



# Get a list of available Windows updates
$Session = New-Object -ComObject Microsoft.Update.Session
$Searcher = $Session.CreateUpdateSearcher()
$SearchResult = $Searcher.Search("IsInstalled=0 AND Type='Software'")
$SearchResult.Updates | Select-Object Title, Description, IsInstalled



# Get a list of running applications
Get-Process | Where-Object {$_.MainWindowTitle -ne ''} | Select-Object ProcessName, MainWindowTitle | Format-Table -AutoSize


# Get the computer uptime
$Uptime = (Get-Date) - (gcim Win32_OperatingSystem).LastBootUpTime
Write-Output "Computer uptime: $($Uptime.Days) days, $($Uptime.Hours) hours, $($Uptime.Minutes) minutes"


# Get a list of active TCP/IP connections
Get-NetTCPConnection | Select-Object State, AppliedSetting, OwningProcess, LocalAddress, LocalPort, RemoteAddress, RemotePort | Format-Table -AutoSize


# Get a list of mapped network drives
Get-PSDrive -PSProvider 'FileSystem' | Where-Object {$_.Root -like '\\*'} | Select-Object Name, Root, CurrentLocation | Format-Table -AutoSize


# Get a list of installed Windows roles and features
Get-WindowsFeature | Where-Object {$_.InstallState -eq 'Installed'} | Select-Object Name, DisplayName, Description | Format-Table -AutoSize


# Get the installed PowerShell version
$PSVersionTable


# Get the Windows version and build information
[System.Environment]::OSVersion


# List folder and file sizes on the root of the C drive, skipping inaccessible folders
Get-ChildItem -Path 'C:\' -Recurse -Force -ErrorAction SilentlyContinue | Sort-Object Length -Descending | Select-Object FullName, @{Name='Size (MB)'; Expression={'{0:N2}' -f ($_.Length / 1MB)}} | Format-Table -AutoSize


# Search for a file named "findme.txt" on the C drive
$fileName = "findme.txt"
$results = Get-ChildItem -Path 'C:\' -Recurse -Filter $fileName -Force -ErrorAction SilentlyContinue
if ($results) {
    Write-Output "File(s) found:"
    $results | Select-Object FullName
} else {
    Write-Output "File not found."
}


# Search for the word "password" in files in the C:\temp folder location
$searchTerm = "password"
$searchPath = "C:\temp"
Get-ChildItem -Path $searchPath -Recurse -File | Select-String -Pattern $searchTerm -CaseSensitive | Select-Object Path, Line


## Connect to remote servers and use remote commands


# Return status of local account bob on a remote server called ServerA

$server ='ServerA'
Invoke-Command -ComputerName $server -ScriptBlock {net user Bob}

# Return a status of services with a name like ora (oracle services) on a remote server

$oracleServices = Invoke-Command -ComputerName $server -ScriptBlock { Get-Service | Where-Object {$_.Name -like '*ora*'} } 
$oracleServices



# Setting up and Using Enter-PSSession
# To use Enter-PSSession, you first need to make sure that PowerShell Remoting is enabled on the remote computer. You can enable it by running the following command on the remote computer:

Enable-PSRemoting -Force


#This command sets up the necessary firewall rules and starts the WinRM service, which is required for PowerShell Remoting.

#Example: Starting a Remote Session
#Once PowerShell Remoting is enabled, you can start a session on the remote computer using:

Enter-PSSession -ComputerName RemoteComputerName


#Replace RemoteComputerName with the actual name or IP address of the remote computer. This command opens an interactive PowerShell session on the remote computer, allowing you to execute commands as if you were #sitting at the machine.

# Running Commands
# While in the session, any command you type runs directly on the remote computer. For example:

Get-Process
Get-Service

last server reboots:
Get-CimInstance -ClassName Win32_OperatingSystem | Select-Object LastBootUpTime

#Running Processes top 10  Ordered by Highest Memory Usage

Get-Process | Sort-Object -Property WorkingSet -Descending | Select-Object -First 10 -Property ProcessName, Id, @{Name="Memory (MB)"; Expression={[math]::round($_.WorkingSet / 1MB, 2)}}

#Running Processes Grouped by Process Name with CPU and Memory Usage

Get-Process | Group-Object Name | Select-Object Name, @{Name="CPU(s)";Expression={($_.Group | Measure-Object CPU -Sum).Sum}}, @{Name="Memory(MB)";Expression={($_.Group | Measure-Object WorkingSet64 -Sum).Sum / 1MB -as [int]}}, Count | Sort-Object "Memory(MB)" -Descending


#check space:
Get-WmiObject Win32_LogicalDisk | Where-Object {$_.DriveType -eq 3} | Select-Object DeviceID, @{Name="FreeSpace(GB)";Expression={$_.FreeSpace / 1GB -as [int]}}



These commands will list processes and services running on the remote computer, not your local machine.

# Exiting the Session
To leave the remote session and return to your local session, use:

Exit-PSSession


This command ends the remote session and returns you to your local PowerShell environment.

# Using Credentials with Enter-PSSession
# If you need to authenticate as a different user, you can use the -Credential parameter:


$creds = Get-Credential
Enter-PSSession -ComputerName RemoteComputerName -Credential $creds

# This variant prompts you to enter credentials, which will then be used for the remote session.

Considerations
Security: Be aware that running commands on remote systems can have significant security implications. Ensure you follow best practices and your organization's security policies.
Network Requirements: PowerShell Remoting requires network connectivity between your local machine and the remote server, and certain ports (like 5985/5986) need to be open on the network firewalls.
Compatibility: PowerShell Remoting works best when both the local and remote systems are running compatible versions of PowerShell.
Enter-PSSession is a powerful tool for system administrators, allowing for direct interaction with remote systems as though the commands are being executed locally.






