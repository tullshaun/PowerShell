(Get-ClusterQuorum).QuorumResource | Get-ClusterParameter

This one-line script gets the cluster's quorum resource and then lists its parameters, which will include the witness path.

PowerShell

(Get-ClusterQuorum).QuorumResource | Get-ClusterParameter
What the output means:

If you're using a File Share Witness, the output will include a property named SharePath, showing the UNC path to the witness share (e.g., \\Server\WitnessShare).

If you're using a Disk Witness, the output will show the details of the cluster disk being used.

If you're using a Cloud Witness, you'll see properties like CloudWitnessName and CloudAccountName.

View Node Quorum Votes
This script lists each node in the cluster and shows its configured vote and its current, dynamic vote.

PowerShell

Get-ClusterNode | Select-Object Name, State, NodeWeight, DynamicWeight
What the output columns mean:

Name: The name of the cluster node.

State: The current status of the node (e.g., Up, Down).

NodeWeight: This is the configured vote. A value of 1 means the node has a vote. A value of 0 means it doesn't. You can set this manually to remove a node's vote.

DynamicWeight: This is the actual vote the node currently has. The cluster automatically manages this. A running node will have a DynamicWeight of 1. If a node goes down, the cluster changes its DynamicWeight to 0 to maintain the quorum.

# Create an array to hold the names of all voting members
$VotingMembers = @()

# --- Nodes ---
# Get all cluster nodes that have a current vote (DynamicWeight = 1)
$VotingNodes = Get-ClusterNode | Where-Object { $_.DynamicWeight -eq 1 }
foreach ($Node in $VotingNodes) {
    # Add each voting node to our list
    $VotingMembers += [PSCustomObject]@{
        ResourceName = $Node.Name
        ResourceType = "Node"
        State        = $Node.State
    }
}

# --- Witness ---
# Get the witness resource from the quorum configuration
$WitnessResource = (Get-ClusterQuorum).QuorumResource

# Check if a witness is configured and if it's currently Online
if ($null -ne $WitnessResource -and $WitnessResource.State -eq 'Online') {
    # Add the witness to our list
    $WitnessResourceName = switch ($WitnessResource.ResourceType.Name) {
        "File Share Witness" { (Get-ClusterParameter -InputObject $WitnessResource -Name "SharePath").Value }
        "Disk Witness"       { "Disk Witness on $($WitnessResource.Name)" }
        "Cloud Witness"      { (Get-ClusterParameter -InputObject $WitnessResource -Name "CloudWitnessName").Value }
        default              { $WitnessResource.Name }
    }
    
    $VotingMembers += [PSCustomObject]@{
        ResourceName = $WitnessResourceName
        ResourceType = $WitnessResource.ResourceType.Name
        State        = $WitnessResource.State
    }
}

# --- Display Results ---
Write-Host "The following resources currently have a vote in the quorum:" -ForegroundColor Green
$VotingMembers | Format-Table -AutoSize

Write-Host "Total Votes: $($VotingMembers.Count)" -ForegroundColor Yellow



Script 1: Find the Witness Server in a Windows Failover Cluster
This script retrieves the witness (either file share or disk witness) configuration of the cluster:

powershell
Copy
Edit
# Requires: Run as Administrator, with Failover Clustering tools installed

Import-Module FailoverClusters

# Get the current cluster name
$cluster = Get-Cluster

# Display the quorum configuration
$quorum = Get-ClusterQuorum
Write-Host "`nQuorum Type: $($quorum.QuorumType)"

# Check for witness details
switch ($quorum.QuorumType) {
    "NodeAndDiskMajority" {
        Write-Host "Witness Type: Disk"
        Write-Host "Witness Resource: $($quorum.WitnessResource)"
    }
    "NodeAndFileShareMajority" {
        Write-Host "Witness Type: File Share"
        Write-Host "Witness Share Path: $($quorum.WitnessSharePath)"
    }
    default {
        Write-Host "No witness configured or not applicable for quorum type: $($quorum.QuorumType)"
    }
}
üìä Script 2: Show Voting Resources and Quorum Votes
This script lists all nodes and identifies which have a vote in the quorum, and also shows the witness vote:

powershell
Copy
Edit
# Requires: Run as Administrator, with Failover Clustering tools installed

Import-Module FailoverClusters

# Get cluster nodes and their vote status
Write-Host "`nNode Quorum Votes:"
Get-ClusterNode | ForEach-Object {
    $node = $_
    $props = Get-ClusterNode $node.Name | Select-Object Name, NodeWeight
    Write-Host " - $($props.Name): Vote = $($props.NodeWeight)"
}

# Get cluster quorum info
$quorum = Get-ClusterQuorum

# Display witness vote if applicable
switch ($quorum.QuorumType) {
    "NodeAndDiskMajority" {
        Write-Host "`nWitness Vote: 1 (Disk Witness)"
        Write-Host "Witness Resource: $($quorum.WitnessResource)"
    }
    "NodeAndFileShareMajority" {
        Write-Host "`nWitness Vote: 1 (File Share Witness)"
        Write-Host "Witness Share Path: $($quorum.WitnessSharePath)"
    }
    "NodeMajority" {
        Write-Host "`nWitness Vote: 0 (No witness configured)"
    }
    default {
        Write-Host "`nWitness information is not available for quorum type: $($quorum.QuorumType)"
    }
}

# Total Votes Calculation
$totalVotes = (Get-ClusterNode).NodeWeight | Measure-Object -Sum | Select-Object -ExpandProperty Sum
if ($quorum.QuorumType -match "Witness") {
    $totalVotes += 1
}
Write-Host "`nTotal Quorum Votes: $totalVotes"
‚úÖ Example Output (from both scripts):
yaml
Copy
Edit
Quorum Type: NodeAndFileShareMajority
Witness Type: File Share
Witness Share Path: \\fileserver\clusterwitness$

Node Quorum Votes:
 - NODE1: Vote = 1
 - NODE2: Vote = 1
 - NODE3: Vote = 1

Witness Vote: 1 (File Share Witness)
Total Quorum Votes: 4











Option 1: List Servers Directly in the Script
This method is great for a quick, one-time check.

Define your list of servers (use the name of one node from each cluster).

Run Invoke-Command to execute the script block on each server in the list.

PowerShell

# 1. Create an array with the names of one node from each cluster
$servers = @(
    "Cluster1-Node1",
    "Cluster2-NodeA",
    "Cluster3-Server1"
    # Add all 20 server names here
)

# 2. Run the command against all servers in the list
Invoke-Command -ComputerName $servers -ScriptBlock {
    # This block runs on each remote server
    (Get-ClusterQuorum).QuorumResource | Get-ClusterParameter
} | Select-Object PSComputerName, Name, Value, Type
The output will be a single table showing the results from all servers. The PSComputerName column tells you which server the result came from.

Option 2: Read Servers from a Text File (Recommended)
This is the best practice for managing a list of 20 servers, as you can easily edit the file without changing the script.

Create a simple text file (e.g., C:\Temp\servers.txt). List one node from each cluster, with one server name per line.

servers.txt:

Cluster1-Node1
Cluster2-NodeA
Cluster3-Server1
Run this script. It will read the server names from the file and execute the command.

PowerShell

# 1. Get the list of servers from your text file
$servers = Get-Content -Path "C:\Temp\servers.txt"

# 2. Run the command against all servers in the list
Invoke-Command -ComputerName $servers -ScriptBlock {
    # This block runs on each remote server
    (Get-ClusterQuorum).QuorumResource | Get-ClusterParameter
} | Select-Object PSComputerName, Name, Value, Type
‚ö†Ô∏è Important Prerequisites
For this to work, you need to ensure the following:

PowerShell Remoting: WinRM (Windows Remote Management) must be enabled on all the target servers. You can enable it by running Enable-PSRemoting -Force in an admin PowerShell window on each server.

Permissions: You must run the script from an account that has administrative privileges on all the remote servers.

Network/Firewall: Your network firewall must allow WinRM traffic between your computer and the remote servers (typically TCP port 5985 for HTTP).







can i use the invoke-command with the -scriptblock as well?



Show thinking
Yes, absolutely. Using the -ScriptBlock parameter is the primary and most powerful way to use Invoke-Command. It's where you place the PowerShell code you want to execute on the remote computers.

You can put anything from a simple one-liner to a complex, multi-line script inside the curly braces {} of a script block.

Example with a Larger Script
Here's how you could run the more detailed script from our previous conversation (the one that lists all voting members) on multiple clusters at once.

PowerShell

# 1. Define your list of cluster nodes (one node from each cluster)
$servers = @(
    "Cluster1-Node1",
    "Cluster2-NodeA",
    "Cluster3-Server1"
)

# 2. Use Invoke-Command with a multi-line ScriptBlock
$results = Invoke-Command -ComputerName $servers -ScriptBlock {
    # --- This entire script runs on each remote server ---

    $VotingMembers = @()

    # Get nodes with a vote
    $VotingNodes = Get-ClusterNode | Where-Object { $_.DynamicWeight -eq 1 }
    foreach ($Node in $VotingNodes) {
        $VotingMembers += [PSCustomObject]@{
            ResourceName = $Node.Name
            ResourceType = "Node"
            State        = $Node.State
        }
    }

    # Get the witness resource
    $WitnessResource = (Get-ClusterQuorum).QuorumResource

    # Check if a witness is configured and online
    if ($null -ne $WitnessResource -and $WitnessResource.State -eq 'Online') {
        $VotingMembers += [PSCustomObject]@{
            ResourceName = $WitnessResource.Name
            ResourceType = $WitnessResource.ResourceType.Name
            State        = $WitnessResource.State
        }
    }

    # This is the output from the script block
    return $VotingMembers
}

# 3. Display the collected results from all servers
# The PSComputerName property is automatically added by Invoke-Command
$results | Format-Table PSComputerName, ResourceName, ResourceType, State -AutoSize


############################################################################################

Yes, you absolutely can. Using Invoke-Command with a -ScriptBlock is the perfect way to run that specific one-liner against multiple servers.

The command inside the script block runs on each remote machine, and Invoke-Command gathers the results for you.

How to Run It
This example shows how to run your command against a list of servers and format the output into a clean table.

PowerShell

# 1. List one node from each cluster you want to query
$servers = @(
    "Cluster1-Node1",
    "Cluster2-NodeA",
    "Cluster3-Server1"
)

# 2. Run your specific command on all servers
Invoke-Command -ComputerName $servers -ScriptBlock {
    (Get-ClusterQuorum).QuorumResource | Get-ClusterParameter
} | Select-Object PSComputerName, Name, Value
What Happens
Invoke-Command connects to each server in your $servers list.

It runs the command (Get-ClusterQuorum).QuorumResource | Get-ClusterParameter on each one.

The results are sent back to your computer. The Select-Object command then formats everything into a single table.

The PSComputerName column is automatically added so you can see which server each result came from.

Example Output
Your final output will look something like this, making it easy to compare the witness configuration across all your clusters:

PSComputerName   Name             Value
--------------   ----             -----
Cluster1-Node1   SharePath        \\FileServer\Witness1
Cluster2-NodeA   SharePath        \\FileServer\Witness2
Cluster3-Server1 CloudWitnessName MyAzureStorageAccount
In this example, the entire script for finding quorum votes is placed inside the -ScriptBlock. Invoke-Command runs it on each server in the $servers list, collects all the results, and adds the PSComputerName property so you know which result came from which cluster.


